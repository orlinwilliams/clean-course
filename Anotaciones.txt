Que es la deuda tecnica: Es simplemente la falta de calidad del codigo, generalmente siempre habra deuda
Aveces es inevitable la  deuda tecnica lo que diferencia de un buen programador, es preocuparse por pagar esta deuda
y como se paga? REFACTORIZACION

-------------
Arrays: debe de estar en plural y definir que contiene exactamente
Boolean: debe de utilizarse "is" "has" "can" deden de ser afirmacion
Number: "max" "min" "total"
Function: prefijo de accion "create" "send" y nombre o verbo y sustantivo, las funciones tienen que hacer exactamente lo que dice su nombre nada mas,
tienen que tener un maximo de 3 parametros, intentar ordenar los argumentos de manera alfabetica, las funciones deben de ser cortas menos de 20 lineas de codigo, evitar el uso del "else" utilizar condicional ternaria
Clases: Tiene que ser un sutantivo o frases con sustantivo, Que exactamente hace la clase?
------------------------
Principios DRY
No repitas lo mismo
copiar y pegar codigo significa que debemos estar alertas indica que hay que refactorizar

Principios SOLID
-Principio de responsabilidad unica
-Open/Close este principio se utilzo el ejemplo de cuando se realizan peticion HTTP
en angular se crea un servicio para no depender de una liberia
-Princio de sutitucion de Liskov
Clases o metodos que pueda recibir como argumento o subclases sin tener que hacer
cambios en el codigo